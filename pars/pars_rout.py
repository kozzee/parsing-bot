from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from pars.api_hh import get_vacancies
from keyboard.start_kb import one_key_kb, two_key_kb
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from heand.start_rout import MainState


pars_router = Router()
    
class ParsingState(StatesGroup):
    page_state = State()



@pars_router.message(F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', MainState.parsing_state)
async def pars(message: Message, state: FSMContext):
    await state.set_state(ParsingState.page_state)
    await state.update_data(page=0)
    await message.answer('–î–µ—Ä–∂–∏ –≤–∞–∫–∞–Ω—Å–∏–∏')
    page = 0
    vacancies = get_vacancies(page)
    for i in vacancies:
        answer = f"{i['title']}\n{i['employer']}\n{i['description']}\n{i['link']}"
        await message.answer(answer)
    await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ?', reply_markup=two_key_kb('–ü–æ–∫–∞–∂–∏', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

    

@pars_router.message(F.text == '–ü–æ–∫–∞–∂–∏', ParsingState.page_state)
async def pars_too(message: Message, state: FSMContext):
    data = await state.get_data()
    page = data['page'] + 1
    await state.update_data(page=page)
    vacancies = get_vacancies(page)
    if vacancies:
        for i in vacancies:
            answer = f"{i['title']}\n{i['employer']}\n{i['description']}\n{i['link']}"
            await message.answer(answer)
    else:
        await message.answer('–í–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç', reply_markup=one_key_kb('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

@pars_router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ParsingState.page_state)
async def exit_pars(message: Message, state: FSMContext):
    await state.set_state(MainState.main_menu)
    await message.answer('–í—ã–±–∏—Ä–∞–π —Ä–µ–∂–∏–º', reply_markup=one_key_kb('–ö–æ–Ω–µ—Ü –∫—Ä—É–≥–∞'))
        
    


# @pars_router.message(F.text == 'üîç –ü–∞—Ä—Å–∏–Ω–≥')
# async def pars(message : Message, state: FSMContext):
#     await state.set_state(VacancyStates.show_vacancies)
#     await state.update_data(page=0)
#     await message.answer('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏!')
#     await message.answer('üîé')
#     vacancies = get_vacancies()
#     for i in vacancies:
#         answer = f"{i['title']}\n{i['employer']}\n{i['description']}\n{i['link']}"
#         await message.answer(answer, reply_markup=one_key_kb('–ü–æ–∫–∞–∂–∏ –µ—â–µ'))
#     await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ?', reply_markup=one_key_kb('–ü–æ–∫–∞–∂–∏ –µ—â–µ'))

# @pars_router.message(F.text == '–ü–æ–∫–∞–∂–∏')
# async def vacant_show(message: Message):
#     vacancies = get_vacancies()
#     for i in vacancies:
#         answer = f"{i['title']}\n{i['employer']}\n{i['description']}\n{i['link']}"
#         await message.answer(answer, reply_markup=one_key_kb('–ü–æ–∫–∞–∂–∏ –µ—â–µ'))

@pars_router.message(F.text == '–ü–æ–∫–∞–∂–∏ –µ—â–µ')
async def next_page(message: Message, state: FSMContext):
    data = await state.get_data()
    page = data['page'] + 1
    await state.update_data(page=page)
    vacancies = get_vacancies(page)
    for i in vacancies:
        answer = f"{i['title']}\n{i['employer']}\n{i['description']}\n{i['link']}"
        await message.answer(answer, reply_markup=one_key_kb('–ü–æ–∫–∞–∂–∏ –µ—â–µ'))

    
